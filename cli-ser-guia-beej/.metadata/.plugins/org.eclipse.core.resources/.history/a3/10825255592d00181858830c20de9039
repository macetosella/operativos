#include <stdio.h>
#include <stdlib.h>
#include <string.h>


typedef struct Alumno{
  int32_t id_mensaje; //4bytes
  int32_t legajo; //4bytes
  char* nombre; //1bytes por char
  char* apellido; //1byte por char
}  Alumno;


int main(int argc, char *argv[])
{
	Alumno * alu = malloc(sizeof(Alumno));
	alu->id_mensaje= 1;
	alu->legajo = 123;
	alu->nombre = malloc(sizeof(char)*10);
	strcpy(alu->nombre, "Juan");
	alu->apellido = malloc(sizeof(char)*10);
	strcpy(alu->apellido, "Perez");

	printf("Enviado: %s %s\n",alu->nombre,alu->apellido );



	void *bufferEnvio = malloc(sizeof(int32_t)*2 + sizeof(char)*20);
	memcpy(bufferEnvio, &(alu->id_mensaje), sizeof(int32_t));
	memcpy(bufferEnvio + sizeof(int32_t), &(alu->legajo), sizeof(int32_t));
	memcpy(bufferEnvio + sizeof(int32_t)*2, &(alu->nombre),sizeof(char)*10);
	memcpy(bufferEnvio + sizeof(int32_t)*2 + sizeof(char)*10, &(alu->apellido), sizeof(char)*10);


	//send() -> reciv() -> llena el bufferRecibo
	void *bufferRecibo = bufferEnvio;

	Alumno * aluRecibido = malloc(sizeof(Alumno));

	memcpy(&(aluRecibido->id_mensaje), bufferRecibo, sizeof(int32_t));
	memcpy(&(aluRecibido->legajo), bufferRecibo + sizeof(int32_t),sizeof(int32_t));
	memcpy(&(aluRecibido->nombre), bufferRecibo + 4, 10);
	memcpy(&(aluRecibido->apellido), bufferRecibo + 10, 10);

	printf("Recibo: %s %s\n",aluRecibido->nombre,aluRecibido->apellido);

	free(alu->nombre);
	free(alu->apellido);
	free(alu);

	free(aluRecibido->nombre);
	free(aluRecibido->apellido);
	free(aluRecibido);

	free(bufferEnvio);
	return 0;
}
